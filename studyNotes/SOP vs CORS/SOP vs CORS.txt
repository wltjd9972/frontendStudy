SOP = Same Origin Policy
원래는 네이버(브라우저) -> 네이버(백엔드API)밖에 안됐음 그러나 openAPI가 많아지면서 이를 없앰 그게 CORS임

CORS = Cross Origin Resource Sharing

1. api 사용가능한지 사전 요청(preflight req)을함
2. 이후 사용이 가능하면 진짜 api를 요청함

But
이걸 브라우저에서 막기히는거 이기 떄문에 

브라우저(프론트)가 아닌 백엔드에서 api요청을 함이걸 이때 사용되는 백엔드 서버를 대리인서버라고 해서 proxyServer라고 함
혹은 모바일 앱에서 접속가능 (네이버 앱 등등) but. 웹브라우저는 안됨
예시.
네이버(브라우저) api대리요청을 요청함-> 네이버(백엔드) 브라우저 대신 요청해서 api를 받아옴-> 다음(백엔드)

이렇게 그냥 프록시 서버만 있으면 접속해서 api요청을 할 수 있는데 이런 개 븅슨같은 구조가왜 나왔냐?

바로바로바 보안 때문임

예시로 네이버(브라우저)에서 네이버(백엔드)로 로그인 요청을 하고 로그인이 성공을 하면 
이때 로그인증표를 줌
문제는 브라우저가 이걸 쿠키에 저장을하고 이 증표를 받아온 백엔드에 api요청을 할때마다 이 증표를 보여줌으로써 로그인 사실을 보냄
근데 만약 진짜네이버에서 로그인한 상태로 짝퉁 네이버(Maver.com)에 실수로 접속을 하고 동작을하면 
이 짝퉁 웹사이트에서 진짜 네이버 백엔드에 요청을함 이때 로그인 토큰은 브라우저 쿠키에 저장되어있어서 api가 호출되면 해킹이 시작되는거임
즉 브라우저에서 증표를 받아온 백엔드를 직렬으로 연결하니까 이런 문제가 생긴거임 그래서 브라우저 -> 프록시서버(받아온 증표가 안감) -> 진짜 백엔드서버로 요청해서 이러한 사태를 막는거임

즉. 정리하면 이거임
회피: 프록시 서버는 요청을 대신해서 원래의 목적지 서버로 전송합니다. 이렇게 하면 프론트엔드는 프록시 서버를 통해 리소스를 요청하게 되므로, CORS 문제를 회피할 수 있습니다.

보안: 프록시 서버를 사용하면, 클라이언트 측에서 민감한 정보나 키를 노출하지 않고, 서버 측에서 필요한 인증 및 처리를 수행할 수 있습니다.

추가 처리: 프록시 서버를 통해 요청과 응답을 중간에서 가로채서, 필요한 처리나 변환 작업을 수행할 수 있습니다.

캐싱: 프록시 서버는 요청된 데이터를 캐싱하여, 빠른 응답이 필요한 경우에 이를 제공할 수 있습니다.

