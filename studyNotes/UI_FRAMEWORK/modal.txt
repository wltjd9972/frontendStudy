const showModal = (): void => {
    setIsOpen(true);
  };

  const handleOk = (): void => {
    setIsOpen(false);
  };

  const handleCancel = (): void => {
    setIsOpen(false);
  };
  const handleComplete = (data: Address): void => {
    console.log(data);
    setIsOpen(false);
  };
  return (
    <>
      <button onClick={showModal}>modal</button>

      {/* 모달 종료 방식 - 1. 모달 숨기는 방법*/}
      {/* <Modal open={isOpen} onOk={handleOk} onCancel={handleCancel}>
        <DaumPostcodeEmbed onComplete={handleComplete} />
      </Modal> */}

      {/* 이 첫 번째 방식에서는 Modal 컴포넌트가 항상 DOM에 남아 있습니다. 모달의 표시 여부는 open prop의 값에 의해 결정됩니다.}

      {/* 모달 종료 방식 - 1. 모달 삭제하는 방법*/}
      {isOpen && (
        <Modal open={true} onOk={handleOk} onCancel={handleCancel}>
          <DaumPostcodeEmbed onComplete={handleComplete} />
        </Modal>
      )}
      {/* isOpen이 true일 때만 Modal 컴포넌트를 렌더링합니다. isOpen이 false일 경우, Modal 컴포넌트는 아예 DOM에서 제거됩니다. */}
    )

    useState 값이 바뀌면 리랜더링이 된다
    즉 state값이 바뀌면 페이지가 다시 랜더링됨